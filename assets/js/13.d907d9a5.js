(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{615:function(s,e,t){"use strict";t.r(e);var n=t(6),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("hr"),s._v(" "),t("p",[s._v("今天咱们来聊聊 String 类型提供的三个方便而又非常相似的截取方法：")]),s._v(" "),t("ol",[t("li",[s._v("slice()")]),s._v(" "),t("li",[s._v("substr()")]),s._v(" "),t("li",[s._v("substring()")])]),s._v(" "),t("h2",{attrs:{id:"相同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[s._v("#")]),s._v(" 相同点")]),s._v(" "),t("p",[s._v("它们的相似体现在两个方面：")]),s._v(" "),t("ol",[t("li",[s._v("功能：都是截取字符串，并且都返回一个新的字符串")]),s._v(" "),t("li",[s._v("参数：都支持接受两个参数，第一个参数都是代表截取的开始位置。第二个参数除了 "),t("code",[s._v("substr()")]),s._v(" ，其他两个 "),t("code",[s._v("slice()")]),s._v(" 和 "),t("code",[s._v("substring()")]),s._v(" 都是代表截取的结束位置")]),s._v(" "),t("li",[s._v("都只接收一个参数的情况下，都是从起始位置一致截取到末尾")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = 'abcdefg';\nlet sli = str.slice(2);\nlet sub = str.substr(2);\nlet subs = str.substring(2);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面这段代码体现的就是上面提到的第三个共同点：")]),s._v(" "),t("blockquote",[t("p",[s._v("都只接收一个参数的情况下，都是从起始位置一致截取到末尾。")])]),s._v(" "),t("p",[s._v("即他们的输出结果都是："),t("code",[s._v("cdefg")])]),s._v(" "),t("h2",{attrs:{id:"不同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[s._v("#")]),s._v(" 不同点")]),s._v(" "),t("p",[s._v("上代码 -------")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 还是上面的例子，咋们加上第二个参数\n\nlet str = 'abcdefg';\nlet sli = str.slice(2, 5);  // 'cde'\nlet sub = str.substr(2, 5);  // 'cdefg'\nlet subs = str.substring(2, 5);  // 'cde'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("通过上面这段代码，我们可以很容易发现 "),t("code",[s._v("substr")]),s._v(" 的叛逆个性：第二个参数代表的并不是截取的结束位置。而是截取字段的长度。")]),s._v(" "),t("p",[s._v("那如果截取的结束位置超过字符串末位的索引，会发生什么情况呢，会报错吗？")]),s._v(" "),t("p",[s._v("好奇心驱使我修改了一下代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = 'abcdefg';\nlet sli = str.slice(2, 10);  // 'cdefg'\nlet sub = str.substr(2, 10);  // 'cdefg'\nlet subs = str.substring(2, 10);  // 'cdefg'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这三个方法很强大，并没有因为我们的无理要求而报出错误，为了验证截取的长度是否溢出，逐个 "),t("code",[s._v("console.log")]),s._v(" 了一下他们的 "),t("code",[s._v("length")]),s._v(" 长度，都是 "),t("code",[s._v("5")]),s._v(" ，没问题")]),s._v(" "),t("p",[s._v("如果起始位置大于字符串长度的情况：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = '12345';\nlet sli = str.slice(6, 8);  // ''\nlet sub = str.substr(6, 2);  // ''\nlet subs = str.substring(6, 8);  // ''\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("很显然，当初始位置大于字符串长度时，截取的为空字符串 "),t("code",[s._v("''")])]),s._v(" "),t("p",[s._v("所以这三个方法，"),t("strong",[s._v("当截取到末尾时，便会停止截取")]),s._v("，不会往后面加上空格")]),s._v(" "),t("p",[s._v("以上是其中两种特殊的情况，还有一种情况就是，参数为负数的情况：")]),s._v(" "),t("p",[s._v("这种情况下三个方法的表现各不相同，我们分开讨论下")]),s._v(" "),t("p",[t("strong",[s._v("1. 先看看 "),t("code",[s._v("slice()")]),s._v(" 的情况")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = '12345';\nlet sli1 = str.slice(-3, 4);  // '34'\nlet sli1 = str.slice(3, -1);  // '4'\nlet sli1 = str.slice(-3, -1);  // '34'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("可以看出 "),t("code",[s._v("slice()")]),s._v(" 方法会将传入的负数与字符串的长度相加，将其转为正数的情况，如 "),t("code",[s._v("str.slice(-3, 4)")]),s._v(" 就相当于 "),t("code",[s._v("str.slice(2, 4)")])]),s._v(" "),t("p",[t("strong",[s._v("2. 之后是 "),t("code",[s._v("substr()")]),s._v(" 的情况")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = '12345';\nlet sli1 = str.substr(-3, 2);  // '34'\nlet sli1 = str.substr(3, -1);  // ''\nlet sli1 = str.substr(-3, -1);  // ''\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("code",[s._v("substr()")]),s._v(" 第一个参数也是将传入的负数与字符串长度相加，转为正数。重点是第二个参数，如果是负数则会默认截取的长度为 "),t("code",[s._v("0")]),s._v("。所以最后两条语句都返回了空字符串 "),t("code",[s._v("''")])]),s._v(" "),t("p",[t("strong",[s._v("3. 最后是 "),t("code",[s._v("substring()")]),s._v(" 的表现")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("let str = '12345';\nlet sli1 = str.substring(-3, 3);  // '123'\nlet sli1 = str.substring(3, -1);  // '123'\nlet sli1 = str.substring(-3, -1);  // ''\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这段代码中，我们发现了两点：")]),s._v(" "),t("p",[s._v("（1）"),t("code",[s._v("substring()")]),s._v(" 会把接收到的负数，全部转为 "),t("code",[s._v("0")]),s._v(" 再进行截取。")]),s._v(" "),t("p",[s._v("（2）接收两个参数时，该方法会先对比两个参数的大小（如有负数会先处理再比较），把较小的一方当做截取的开始位置，较大一方当做截取的结束位置")]),s._v(" "),t("p",[s._v("尤其是第二点特征，"),t("code",[s._v("slice()")]),s._v(" 的话，不会对两个参数进行对比，如果第一个参数大于第二个参数，会直接返回空字符串")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("通过分析了他们在不同参数情况下的表现，最后把他们进行一个小小的总结： 相同点在文章开头已经总结，接下来是区别：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("slice()")]),s._v(" 两个参数分别代表着截取的开头和结尾，而 "),t("code",[s._v("substr()")]),s._v(" 的第二个参数则代表着截取的位数（即长度），"),t("code",[s._v("substring()")]),s._v(" 先对两个参数进行大小对比，再确定截取区域")]),s._v(" "),t("li",[s._v("三个方法如果截取到末尾，便会停止截取，无论参数约定的结束位置、或约定的长度有多大。")]),s._v(" "),t("li",[s._v("当参数为负数的情况："),t("code",[s._v("slice()")]),s._v(" 会把负数与字符串的长度相加，得到的正数再执行代码。"),t("code",[s._v("substr()")]),s._v(" 第一个参数也是把负数与字符串的长度相加得到正数，第二个参数则会把负数转为 "),t("code",[s._v("0")]),s._v("。"),t("code",[s._v("substring()")]),s._v(" 则会把所有负数参数转为 "),t("code",[s._v("0")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);